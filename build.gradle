apply from: '../scripts/module.gradle'
//apply plugin: 'kotlin-android-extensions'
//apply plugin: 'kotlin-android'

def componentsPath = "${project.rootProject.rootDir.path}/components.gradle"

if (new File(componentsPath).exists()) {
    apply from: componentsPath
}

android {
    defaultConfig {
        if (project.hasProperty('entryComponent')) {
            manifestPlaceholders.entryActivity = findComponentEntryActivity()
        }
        buildConfigField "String[]", "COMP_SERVICES", findComponentServices()
    }
}

def getMyComps() {
    try {
        return comps
    } catch (e) {
        return []
    }
}

def findComponentEntryActivity() {
    String entryActivity = ''
    if (project.hasProperty('entryComponent')) {
        def defEntryComponent = project.entryComponent
        def localComps = getMyComps()
        if (defEntryComponent && defEntryComponent.length() > 0) {
            for (def value : localComps) {
                if (value.name != null && defEntryComponent == value.name) {
                    entryActivity = value.entryActivity
                    break
                }
            }
        }
    }
    return entryActivity
}

def findComponentServices() {
    String services = '{'
    if (project.hasProperty('entryComponent')) {
        def defEntryComponent = project.entryComponent
        def localComps = getMyComps()
        if (defEntryComponent && defEntryComponent.length() > 0) {
            for (def value : localComps) {
                if (value.compile && value.service != null && value.service.length() > 0) {
                    services = "${services}\"${value.service}\","
                }
            }
        }
    }
    services = services + '}'
    return services
}


dependencies {
    // 基础库
    api deps.mantisApi
    api deps.common
    api deps.multidex
    // 基础 UI
    api deps.appcompat_v7
    api deps.constraint
    api deps.recyclerView_v7
    api deps.design
    // 图片
    api deps.glide4
    api deps.glideOkHttp
    // json
    api deps.gson
    // 网络
    api deps.okhttp3
    api deps.okhttp3_logger
    // retrofit
    api deps.retrofit
    api deps.converter_gson
    api deps.adapter_rxjava2
    // rx
    api deps.rxjava2
    api deps.rxandroid
    // 通信
    api deps.eventbus
    api deps.butterknife
    // router
    api deps.arouterApi
    // arch
    api deps.lifecycle_extensions
    api deps.lifecycle_runtime
    // binding adapter
//    api deps.bindingAdapter
//    api deps.bindingAdapterRv

    add('annotationProcessor', deps.butterknifeProcessor, {})
    add('annotationProcessor', deps.arouterCompiler, {})
    add('annotationProcessor', deps.lifecycle_compiler, {})
    add('annotationProcessor', deps.mantis_compiler, {})
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}
